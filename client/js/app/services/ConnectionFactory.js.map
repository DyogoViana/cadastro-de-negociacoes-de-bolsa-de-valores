{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["store","dataBaseName","version","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","event","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA;;;AAKA,IAAMA,QAAQ,CAAC,aAAD,CAAd;AACA,IAAMC,eAAe,mDAArB;AACA,IAAMC,UAAU,CAAhB;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAGaC,iB,WAAAA,iB;AAET,iCAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACH;;AAED;;;;;wCACuB;AACnB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,YAAtB,EAAoCC,OAApC,CAAlB;;AAEAQ,4BAAYI,eAAZ,GAA8B,iBAAS;AACnCT,sCAAkBU,aAAlB,CAAgCC,MAAMC,MAAN,CAAaC,MAA7C;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwB,iBAAS;AAAE;AAC/B,wBAAI,CAAChB,UAAL,EAAiB;AACbA,qCAAaa,MAAMC,MAAN,CAAaC,MAA1B;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAW;AAC1B,kCAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,yBAFD;AAGH;AACDE,4BAAQL,UAAR;AACH,iBATD;;AAWAO,4BAAYW,OAAZ,GAAsB,iBAAS;AAC3BC,4BAAQC,GAAR,CAAYP,MAAMC,MAAN,CAAaO,KAAzB;AACAf,2BAAOO,MAAMC,MAAN,CAAaO,KAAb,CAAmBC,IAA1B;AACH,iBAHD;AAIH,aAtBM,CAAP;AAuBH;;AAED;;;;sCACqBtB,U,EAAY;AAC7BH,kBAAM0B,OAAN,CAAc,iBAAS;AACnB,oBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqC5B,KAArC,CAAJ,EAAiD;AAAE;AAC/CG,+BAAW0B,iBAAX,CAA6B7B,KAA7B;AACH;;AAEDG,2BAAW2B,iBAAX,CAA6B9B,KAA7B,EAAoC,EAAE;AAClC+B,mCAAe;AADiB,iBAApC;AAGH,aARD;AAUH;;AAED;;;;0CACyB;AACrB,gBAAI5B,UAAJ,EAAgB;AACZC;AACAD,6BAAa,IAAb;AACH;AACJ;;;;;;AASL","file":"ConnectionFactory.js","sourcesContent":["// ConnectionFactory.js\r\n\r\n\r\n\r\n\r\nconst store = [\"negociacoes\"];\r\nconst dataBaseName = \"Banco de Dados para Cadastros da Bolsa de Valores\";\r\nconst version = 9;\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error(\"Não é possível criar estâncias de 'ConnectionFactory'.\");\r\n    }\r\n\r\n    // Acessa o banco de dados indexedDB.\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            let openRequest = window.indexedDB.open(dataBaseName, version);\r\n\r\n            openRequest.onupgradeneeded = event => {\r\n                ConnectionFactory._createStores(event.target.result);\r\n            };\r\n            \r\n            openRequest.onsuccess = event => { // recebe conexão já existente ou uma que acabou de ser criada\r\n                if (!connection) {\r\n                    connection = event.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function() {\r\n                        throw new Error(\"Você não pode fechar diretamente a conexão.\")\r\n                    };\r\n                }\r\n                resolve(connection);\r\n            }\r\n            \r\n            openRequest.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject(event.target.error.name);\r\n            };\r\n        });\r\n    }\r\n    \r\n    // Cria Stores no banco de dados.\r\n    static _createStores(connection) {\r\n        store.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store)) { // caso tenha uma store, ela será deletada.\r\n                connection.deleteObjectStore(store);\r\n            }\r\n    \r\n            connection.createObjectStore(store, { // Caso tudo esteja correto, será criado uma nova store.\r\n                autoIncrement: true\r\n            });\r\n        });\r\n\r\n    }\r\n\r\n    // Fecha a conexão.\r\n    static closeConnection() {\r\n        if (connection) {\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n---------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------\r\n\r\n\r\n    # Anotações:\r\n\r\n    - Foi usado o padrão de projeto chamado 'Module Pattern', para não deixar acessível globalmente.\r\n\r\n    - Foi criado uma função 'autoinvocada'/função anônima, Simultaneamente, ela será carregada e executada. Deixando assim a variável 'Connectionfactory' no escopo global.\r\n\r\n    - Para mudar o método 'close', foi usado o 'Monkey Patch', que consiste forçarmos a modificação de uma API. \r\n\r\n\r\n---------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------*/"]}