{"version":3,"sources":["../../app-es6/helpers/DateHelper.js"],"names":["DateHelper","Error","data","getDate","getMonth","getFullYear","texto","test","Date","split","map","item","indice"],"mappings":";;;;;;;;AAAA;;;AAGA;IACMA,U;AAEF,0BAAc;AAAA;;AACV,cAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAED;AACA;;;;;sCACqBC,I,EAAM;AACvB,mBAAUA,KAAKC,OAAL,EAAV,UAA4BD,KAAKE,QAAL,KAAgB,CAA5C,UAAiDF,KAAKG,WAAL,EAAjD;AACH;;;sCAEoBC,K,EAAO;AACxB;AACA;AACA,gBAAI,CAAC,sBAAsBC,IAAtB,CAA2BD,KAA3B,CAAL,EAAwC;AACpC,sBAAM,IAAIL,KAAJ,CAAU,kCAAV,CAAN;AACH;;AAED,sDAAWO,IAAX,mCAAmBF,MAAMG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqB,UAACC,IAAD,EAAOC,MAAP;AAAA,uBAAkBD,OAAOC,SAAS,CAAlC;AAAA,aAArB,CAAnB;AACH;;;;;;AAKL","file":"DateHelper.js","sourcesContent":["// DateHelper.js\r\n\r\n\r\n// Classe para criação da data de negociação.\r\nclass DateHelper {\r\n\r\n    constructor() {\r\n        throw new Error(\"Esta classe não pode ser instanciada.\");\r\n    }\r\n\r\n    // escreve a data num formato padrão ao usuário.\r\n    // a data sai errada pq o Date guarda de 0 ~ 11.\r\n    static dataParaTexto(data) {\r\n        return `${data.getDate()}/${data.getMonth()+1}/${data.getFullYear()}`;\r\n    }\r\n\r\n    static textoParaData(texto) {\r\n        // Expressão regular para validar a data no formato certo -- fail fast.\r\n        // A linha com o throw new só será executada se o if for falso, por isso, o sinal de !.\r\n        if (!/^\\d{4}-\\d{2}-\\d{2}$/.test(texto)) {\r\n            throw new Error(\"Deve está no formato aaaa-mm-dd.\");\r\n        }\r\n\r\n        return new Date(...texto.split(\"-\").map((item, indice) => item - indice % 2));\r\n    }\r\n}\r\n\r\n\r\n\r\n/* \r\n    # Anotações:\r\n\r\n    - Agora com o static o 'DateHelper' pode ser chamado como uma class. Assim evita repetição.\r\n\r\n*/"]}