{"version":3,"sources":["../../app-es6/DAO/NegociacaoDAO.js"],"names":["NegociacaoDAO","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","event","onerror","console","log","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;AAAA;;;IAIMA,a;AAEF,2BAAYC,UAAZ,EAAwB;AAAA;;AACpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;AAED;;;;;iCACSC,U,EAAY;AAAA;;AACjB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,MAAKN,WAAL,CACZO,WADY,CACA,CAAC,MAAKN,MAAN,CADA,EACe,WADf,EAEZO,WAFY,CAEA,MAAKP,MAFL,EAGZQ,GAHY,CAGRP,UAHQ,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,UAACC,KAAD,EAAW;AAC3BP;AACF,iBAFF;;AAIAE,wBAAQM,OAAR,GAAkB,iBAAS;AACvBC,4BAAQC,GAAR,CAAYH,MAAMI,MAAN,CAAaC,KAAzB;AACAX,2BAAO,0CAAP;AACF,iBAHF;AAIH,aAfM,CAAP;AAgBH;;AAED;;;;qCACa;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIY,SAAS,OAAKjB,WAAL,CACXO,WADW,CACC,CAAC,OAAKN,MAAN,CADD,EACe,WADf,EAEXO,WAFW,CAEC,OAAKP,MAFN,EAGXiB,UAHW,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,iBAAS;AACvB,wBAAIU,QAAQT,MAAMI,MAAN,CAAaM,MAAzB;;AAEA,wBAAGD,KAAH,EAAU;AAAE;AACR,4BAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAgBH,KAAKI,KAArB,EAA6BJ,KAAKK,WAAlC,EAA+CL,KAAKM,MAApD,CAAjB;AACAR,8BAAMS,QAAN;AAEH,qBAND,MAMO;AACJzB,gCAAQe,WAAR;AACF;AACL,iBAZD;;AAcAF,uBAAOL,OAAP,GAAiB,iBAAS;AACtBC,4BAAQC,GAAR,CAAYH,MAAMI,MAAN,CAAaC,KAAzB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAIH,aA3BM,CAAP;AA4BH;;AAED;;;;qCACa;AAAA;;AAET,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,OAAKN,WAAL,CACZO,WADY,CACA,CAAC,OAAKN,MAAN,CADA,EACe,WADf,EAEZO,WAFY,CAEA,OAAKP,MAFL,EAGZ6B,KAHY,EAAd;;AAKCxB,wBAAQI,SAAR,GAAoB;AAAA,2BAASN,QAAQ,kCAAR,CAAT;AAAA,iBAApB;;AAEAE,wBAAQM,OAAR,GAAkB,iBAAS;AACvBC,4BAAQC,GAAR,CAAYH,MAAMI,MAAN,CAAaC,KAAzB;AACAX,2BAAO,0CAAP;AACH,iBAHD;AAIJ,aAbM,CAAP;AAcH;;;;;;AAaL","file":"NegociacaoDAO.js","sourcesContent":["// NegociacaoDAO.js -- DAO 'Data Access Object'.\r\n\r\n\r\n\r\nclass NegociacaoDAO {\r\n\r\n    constructor(connection) {\r\n        this._connection = connection;\r\n        this._store = \"negociacoes\";\r\n    }\r\n\r\n    // Adiciona uma nova transação de negociação no banco de dados.\r\n    adiciona(negociacao) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n             .transaction([this._store], \"readwrite\")\r\n             .objectStore(this._store)\r\n             .add(negociacao);\r\n\r\n            request.onsuccess = (event) => {\r\n                resolve();\r\n             };\r\n\r\n            request.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject(\"Não foi possível adicionar a negociação.\");\r\n             };\r\n        });\r\n    }\r\n\r\n    // Lista todas as negociações na view.\r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let cursor = this._connection\r\n             .transaction([this._store],'readwrite')\r\n             .objectStore(this._store)\r\n             .openCursor();\r\n\r\n            let negociacoes = [];\r\n\r\n            cursor.onsuccess = event => {\r\n                 let atual = event.target.result;\r\n\r\n                 if(atual) { // Se o ponteiro existir, ele pega o dado.\r\n                     let dado = atual.value;\r\n\r\n                     negociacoes.push(new Negociacao((dado._data), dado._quantidade, dado._valor));\r\n                     atual.continue();\r\n\r\n                 } else { \r\n                    resolve(negociacoes);\r\n                 }\r\n            };\r\n\r\n            cursor.onerror = event => {\r\n                console.log(event.target.error);\r\n                reject(\"Não foi posível listar as negociações.\");\r\n            };\r\n        });\r\n    }\r\n\r\n    // Apaga a lista de negociações da view e do banco.\r\n    apagaTodos() {\r\n        \r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this._connection\r\n             .transaction([this._store], \"readwrite\")\r\n             .objectStore(this._store)\r\n             .clear();\r\n\r\n             request.onsuccess = event => resolve(\"Negociaçõs apagadas com sucesso.\");\r\n\r\n             request.onerror = event => {\r\n                 console.log(event.target.error);\r\n                 reject(\"Não foi possível remover as negociações.\");\r\n             } \r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n-------------------------------------------------------------------------\r\n-------------------------------------------------------------------------\r\n\r\n\r\n    # Anotações\r\n\r\n    - O 'cursor' é o responsável por passear pelos dados da Object Store. Ele tem um ponteiro para o primeiro, segundo e os demais elementos ordenados.\r\n\r\n    - \r\n\r\n\r\n-------------------------------------------------------------------------\r\n-------------------------------------------------------------------------\r\n*/"]}