{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","store","dataBaseName","version","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","event","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;;;AAGA,IAAIA,oBAAqB,YAAY;;AAEjC,QAAMC,QAAQ,CAAC,aAAD,CAAd;AACA,QAAMC,eAAe,mDAArB;AACA,QAAMC,UAAU,CAAhB;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAGA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,wDAAV,CAAN;AACH;;AAED;;;AANJ;AAAA;AAAA,4CAO2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,YAAtB,EAAoCC,OAApC,CAAlB;;AAEAO,gCAAYI,eAAZ,GAA8B,iBAAS;AACnCd,0CAAkBe,aAAlB,CAAgCC,MAAMC,MAAN,CAAaC,MAA7C;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,iBAAS;AAAE;AAC/B,4BAAI,CAACf,UAAL,EAAiB;AACbA,yCAAaY,MAAMC,MAAN,CAAaC,MAA1B;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,iBAAS;AAC3BC,gCAAQC,GAAR,CAAYP,MAAMC,MAAN,CAAaO,KAAzB;AACAf,+BAAOO,MAAMC,MAAN,CAAaO,KAAb,CAAmBC,IAA1B;AACH,qBAHD;AAIH,iBAtBM,CAAP;AAuBH;;AAED;;AAjCJ;AAAA;AAAA,0CAkCyBrB,UAlCzB,EAkCqC;AAC7BH,sBAAMyB,OAAN,CAAc,iBAAS;AACnB,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqC3B,KAArC,CAAJ,EAAiD;AAAE;AAC/CG,mCAAWyB,iBAAX,CAA6B5B,KAA7B;AACH;;AAEDG,+BAAW0B,iBAAX,CAA6B7B,KAA7B,EAAoC,EAAE;AAClC8B,uCAAe;AADiB,qBAApC;AAGH,iBARD;AAUH;;AAED;;AA/CJ;AAAA;AAAA,8CAgD6B;AACrB,oBAAI3B,UAAJ,EAAgB;AACZC;AACAD,iCAAa,IAAb;AACH;AACJ;AArDL;;AAAA;AAAA;AAuDH,CAjEuB,EAAxB;;AAwEA","file":"ConnectionFactory.js","sourcesContent":["// ConnectionFactory.js\r\n\r\n\r\nvar ConnectionFactory = (function () {\r\n\r\n    const store = [\"negociacoes\"];\r\n    const dataBaseName = \"Banco de Dados para Cadastros da Bolsa de Valores\";\r\n    const version = 9;\r\n\r\n    var connection = null;\r\n    var close = null;\r\n\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error(\"Não é possível criar estâncias de 'ConnectionFactory'.\");\r\n        }\r\n\r\n        // Acessa o banco de dados indexedDB.\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dataBaseName, version);\r\n\r\n                openRequest.onupgradeneeded = event => {\r\n                    ConnectionFactory._createStores(event.target.result);\r\n                };\r\n                \r\n                openRequest.onsuccess = event => { // recebe conexão já existente ou uma que acabou de ser criada\r\n                    if (!connection) {\r\n                        connection = event.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error(\"Você não pode fechar diretamente a conexão.\")\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                }\r\n                \r\n                openRequest.onerror = event => {\r\n                    console.log(event.target.error);\r\n                    reject(event.target.error.name);\r\n                };\r\n            });\r\n        }\r\n        \r\n        // Cria Stores no banco de dados.\r\n        static _createStores(connection) {\r\n            store.forEach(store => {\r\n                if (connection.objectStoreNames.contains(store)) { // caso tenha uma store, ela será deletada.\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n        \r\n                connection.createObjectStore(store, { // Caso tudo esteja correto, será criado uma nova store.\r\n                    autoIncrement: true\r\n                });\r\n            });\r\n\r\n        }\r\n\r\n        // Fecha a conexão.\r\n        static closeConnection() {\r\n            if (connection) {\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n}) ();\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n---------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------\r\n\r\n\r\n    # Anotações:\r\n\r\n    - Foi usado o padrão de projeto chamado 'Module Pattern', para não deixar acessível globalmente.\r\n\r\n    - Foi criado uma função 'autoinvocada'/função anônima, Simultaneamente, ela será carregada e executada. Deixando assim a variável 'Connectionfactory' no escopo global.\r\n\r\n    - Para mudar o método 'close', foi usado o 'Monkey Patch', que consiste forçarmos a modificação de uma API. \r\n\r\n\r\n---------------------------------------------------------------------------------------------\r\n----------------------------------------------------------------------------------------------*/"]}