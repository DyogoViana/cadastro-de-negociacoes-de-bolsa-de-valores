{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["NegociacaoController","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_listaNegociacoes","Bind","ListaNegociacoes","NegociacoesView","_mensagem","Mensagem","MensagemView","_service","NegociacaoService","_iniciacaoAutomatica","lista","then","negociacoes","forEach","adiciona","negociacao","catch","console","log","erro","texto","setInterval","importaNegociacoes","coluna","_ordemAtual","inverteOrdem","ordena","a","b","event","preventDefault","_criaNegociacao","cadastra","mensagem","_limpaFormulario","importa","apaga","esvaziaTabela","Negociacao","DateHelper","textoParaData","value","parseInt","parseFloat","focus"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["// NegociacaoController.js\r\n\r\n\r\nclass NegociacaoController {\r\n    \r\n    constructor() {\r\n\r\n        let $ = document.querySelector.bind(document);\r\n    \r\n        this._inputData = $(\"#data\");\r\n        this._inputQuantidade = $(\"#quantidade\");\r\n        this._inputValor = $(\"#valor\");\r\n\r\n        // Proxy para criação da trap no 'adiciona' e 'esvazia'.\r\n        this._listaNegociacoes = new Bind(\r\n            new ListaNegociacoes(), // modelo\r\n            new NegociacoesView($(\"#negociacoesView\")), // view.\r\n            \"adiciona\", \"esvaziaTabela\", \"ordena\", \"inverteOrdem\"); // Condição para atualizar. Props que vão disparar a 'View'.\r\n\r\n        // Mensagem que aparece ao usuário.\r\n        this._mensagem = new Bind(\r\n            new Mensagem(), // modelo.\r\n            new MensagemView($(\"#mensagemView\")), // view.\r\n            \"texto\"); // Condição para atualizar. Props que vão disparar a 'View'.\r\n        \r\n        this._service = new NegociacaoService();\r\n        \r\n        this._iniciacaoAutomatica();        \r\n    }\r\n        \r\n\r\n    \r\n    _iniciacaoAutomatica() {\r\n        // Cria uma conexão e lista as negociações na view.\r\n        this._service\r\n         .lista()\r\n         .then(negociacoes =>\r\n             negociacoes.forEach(negociacao =>\r\n                 this._listaNegociacoes.adiciona(negociacao)))\r\n         .catch(erro => {\r\n             console.log(erro);\r\n             this._mensagem.texto = erro;\r\n         })\r\n        \r\n         setInterval(() => {\r\n            this.importaNegociacoes();\r\n        }, 3000); // Intervalos onde são importadas as impostações das negociações.\r\n    }\r\n\r\n    // Ordena a tabela. \r\n    ordena(coluna) {\r\n        if (this._ordemAtual == coluna) {\r\n            this._listaNegociacoes.inverteOrdem();\r\n        } else {\r\n            this._listaNegociacoes.ordena((a, b) => a[coluna] -b[coluna]);\r\n        }\r\n        this._ordemAtual = coluna;\r\n    }\r\n\r\n    // Adiciona uma nova lista de negociação.\r\n    adiciona(event) {\r\n        event.preventDefault();\r\n\r\n        let negociacao = this._criaNegociacao();\r\n\r\n        this._service\r\n         .cadastra(negociacao)\r\n         .then(mensagem => {\r\n             this._listaNegociacoes.adiciona(negociacao);\r\n             this._mensagem.texto = mensagem;\r\n             console.log(\"Negociação adicionada com sucesso.\");\r\n             this._limpaFormulario();\r\n         })\r\n         .catch(erro => this._mensagem.texto = erro);\r\n    }\r\n\r\n    // Importando negociações via Ajax, com o padrão de projeto 'Promise'.\r\n    importaNegociacoes() {\r\n\r\n        this._service\r\n         .importa(this._listaNegociacoes.negociacoes)\r\n         .then(negociacoes =>\r\n            negociacoes.forEach(negociacao => {\r\n                this._listaNegociacoes.adiciona(negociacao);\r\n                this._mensagem.texto = \"Negociações do período importadas com sucesso.\";\r\n                console.log(\"Negociações do perído importadas com sucesso, usando Promise.\");\r\n         }))\r\n         .catch(erro => this._mensagem.texto = erro);\r\n    }\r\n\r\n    // Apaga a tabela de negociações na view e no banco.\r\n    apaga() {\r\n        this._service\r\n         .apaga()\r\n         .then(mensagem => {\r\n             this._listaNegociacoes.esvaziaTabela();\r\n             this._mensagem.texto = mensagem;\r\n             console.log(\"Negociações apagadas com sucesso.\");  \r\n         })\r\n         .catch(erro => this._mensagem.texto = erro);\r\n    }\r\n\r\n    //cria uma negociação.\r\n    _criaNegociacao() {\r\n        return new Negociacao (\r\n            DateHelper.textoParaData(this._inputData.value),\r\n            parseInt(this._inputQuantidade.value),\r\n            parseFloat(this._inputValor.value)\r\n        );\r\n    }\r\n\r\n    // Limpa o formulário e o foco vai para a data, após adicionar uma negociação.\r\n    _limpaFormulario() {\r\n        this._inputData.value = \"\";\r\n        this._inputQuantidade.value = 1;\r\n        this._inputValor.value = 0.0;\r\n\r\n        this._inputData.focus();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    # Anotações:\r\n\r\n    - spread operator -- São as reticências antes do _this_. indica que ele desmenbrará o array e posiciona na mesma ordem no construtor.\r\n\r\n    - item - indice % 2 -- ler item, menos indice, módulo dois.\r\n\r\n    - explicando a ordem das colunas: \r\n        lista.sort((a, b) => a - b);  \r\n        Se o valor retornado for 0 não há alteração a ser feita, se o valor retornado for positivo, 'b' deve vir antes de 'a', se o valor for negativo, 'a' deve vir antes de 'b'.\r\n*/"]}